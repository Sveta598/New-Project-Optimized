{"version":3,"sources":["hooks/useServerData.js","switcher/switcher.js","loader/loader.js","svg/arrowUp.js","svg/arrowDown.js","detailItem/detailItem.js","search/searchElement.js","table/table.js","inputForm/inputForm.js","tableBody/tableBody.js","paginator/paginator.js","App.js","index.js"],"names":["useServerData","url","isButtonClick","useState","contactData","setContactData","isLoading","setIsLoading","isLoaded","setIsLoaded","useEffect","axios","get","then","res","data","Switcher","buttonHandler","style","display","justifyContent","margin","className","onClick","Loader","ArrowUp","marginLeft","xmlns","width","height","fill","viewBox","fillRule","d","ArrowDown","DetailedItem","detailItemData","AddressstreetAddress","address","streetAddress","AddressCity","city","AddressState","state","AddressZip","zip","id","firstName","lastName","email","phone","description","SearchElement","onSearchSend","searchValue","setSearchValue","type","placeholder","aria-label","aria-describedby","value","onChange","event","target","Table","sortData","directionSort","detailRow","rowIsClick","fieldData","setFieldData","Arrow","fieldSortData","field","map","item","InputForm","getInputFormData","isFormOpen","setIsFormOpen","setid","setfirstName","setlastName","setemail","setphone","noValidate","onSubmit","e","preventDefault","TableBody","Paginator","pages","currentPage","onNextClick","onPreviousClick","buttonNextDisabled","buttonPreviousDisabled","currentPageActiv","currentPageNumber","tabIndex","p","App","setIsButtonClick","setDirectionSort","rowItem","setrowItem","setUrl","totalCountRow","setTotalCountRow","totalCountPage","setTotalCountPage","setRowIsClick","setCurrentPageNumber","setButtonNextDisabled","setButtonPreviousDisabled","setCurrentPageActiv","searchText","setSearchText","newRow","setNewRow","filtredData","filter","el","toLowerCase","includes","lastBlockRow","firstBlockRow","currentBlockRows","slice","unshift","length","getTotalCountPage","Math","ceil","i","push","copyData","concat","sort","a","b","reverse","row","text","pg","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61c4dbb9.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useServerData = ({url, isButtonClick}) => {\r\n\r\n    const [contactData, setContactData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    const getData = () => {\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!isButtonClick){\r\n            return\r\n        }\r\n        setIsLoading(true)\r\n\r\n        axios.get(url).then((res) => {\r\n            \r\n            setContactData(res.data);\r\n            setIsLoading(false);\r\n            setIsLoaded(true)\r\n\r\n           \r\n          });\r\n      }, [url, isButtonClick]);\r\n\r\n    return [{contactData, isLoading, isLoaded, setContactData, setIsLoading}, getData]\r\n\r\n\r\n}\r\n\r\nexport default useServerData;","import React from 'react';\r\n\r\nconst Switcher = ({buttonHandler}) => {\r\n    const smallUrl = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n    const bigUrl = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n    return (\r\n        <div style={{display: \"flex\", justifyContent: \"center\", margin: \"25px 25px 0 0\"}}>\r\n            <button \r\n            className=\"btn btn-danger\" \r\n            style={{margin: \"0 25px 0 0\"}} \r\n            onClick={()=>(buttonHandler(smallUrl))}>32 rows</button>\r\n\r\n            <button \r\n            className=\"btn btn-warning\" \r\n            onClick={()=>(buttonHandler(bigUrl))}>1000 rows</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Switcher","import React from 'react';\r\nimport './loader.css'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"lds-dual-ring\"></div>\r\n    )\r\n}\r\nexport default Loader","import React from 'react';\r\n\r\nconst ArrowUp = () => {\r\n    return (\r\n        <div style={{marginLeft: '5px', display: 'inline'}}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-arrow-up-square\" viewBox=\"0 0 16 16\">\r\n                <path fillRule=\"evenodd\" d=\"M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.5 9.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z\"/>\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArrowUp;","import React from 'react';\r\n\r\nconst ArrowDown = () => {\r\n    return (\r\n        <div style={{marginLeft: '5px', display: 'inline'}}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-arrow-down-square\" viewBox=\"0 0 16 16\">\r\n                <path fillRule=\"evenodd\" d=\"M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.5 2.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z\"/>\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArrowDown;","import React from 'react';\r\n\r\nconst DetailedItem = ({detailItemData}) => {\r\n\r\n    const AddressstreetAddress = detailItemData&&detailItemData.address? detailItemData.address.streetAddress : null\r\n    const AddressCity = detailItemData&&detailItemData.address? detailItemData.address.city : null\r\n    const AddressState = detailItemData&&detailItemData.address? detailItemData.address.state : null\r\n    const AddressZip = detailItemData&&detailItemData.address? detailItemData.address.zip : null\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                id: <b>{detailItemData.id}</b>,\r\n            </div>\r\n            <div>\r\n                firstName: <b>{detailItemData.firstName}</b>\r\n            </div>\r\n            <div>\r\n                lastName: <b>{detailItemData.lastName}</b>\r\n            </div>\r\n            <div>\r\n                email: <b>{detailItemData.email}</b>\r\n            </div>\r\n            <div>\r\n                phone: <b>{detailItemData.phone}</b>\r\n            </div>\r\n            <div>\r\n                streetAddress: <b>{AddressstreetAddress}</b>\r\n            </div>\r\n            <div>\r\n                city: <b>{AddressCity}</b>\r\n            </div>\r\n            <div>\r\n                state: <b>{AddressState}</b>\r\n            </div>\r\n            <div>\r\n                zip: <b>{AddressZip}</b>\r\n            </div>\r\n            <div>\r\n                description: <p><b>{detailItemData.description}</b></p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default DetailedItem;","import React, {useState} from 'react';\r\n\r\nconst SearchElement = ({onSearchSend}) => {\r\n\r\n    const [searchValue, setSearchValue] = useState('')\r\n\r\n    return (\r\n        <div className=\"input-group mb-3 mt-3\">\r\n            <input \r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                placeholder=\"Enter FirstName/LastName/email\" \r\n                aria-label=\"Recipient's username\" \r\n                aria-describedby=\"basic-addon2\"\r\n                value = {searchValue}\r\n                onChange={(event)=>{setSearchValue(event.target.value)}}\r\n            />\r\n            <div className=\"input-group-append\">\r\n                <button \r\n                    className=\"btn btn-outline-secondary\" \r\n                    type=\"button\"\r\n                    onClick={()=>onSearchSend(searchValue)}>\r\n                        Search\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default SearchElement","import React, {useState} from 'react';\r\nimport ArrowUp from './../svg/arrowUp'\r\nimport ArrowDown from './../svg/arrowDown'\r\nimport DetailedItem from './../detailItem/detailItem'\r\nimport SearchElement from './../search/searchElement'\r\n\r\nconst Table = ({sortData, contactData, directionSort, detailRow, detailItemData, rowIsClick, onSearchSend}) => {\r\n\r\n    const [fieldData, setFieldData] = useState('')\r\n\r\n    const Arrow = () => {\r\n        return (\r\n            directionSort? <ArrowDown/> : <ArrowUp/>\r\n        )\r\n    }\r\n\r\n    const fieldSortData = (field) => {\r\n        sortData(field)\r\n        setFieldData(field)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <SearchElement onSearchSend={onSearchSend}/>\r\n            <table className=\"table\">\r\n\r\n                <thead>\r\n                    <tr>\r\n                        <th onClick={()=>{fieldSortData('id')}}>\r\n                            id {fieldData==='id'? <Arrow/> : null}\r\n                        </th>\r\n                        <th onClick={()=>{fieldSortData('firstName')}}>\r\n                            FirstName {fieldData==='firstName'? <Arrow/> : null}\r\n                        </th>\r\n                        <th onClick={()=>{fieldSortData('lastName')}}>\r\n                            LastName {fieldData==='lastName'? <Arrow/> : null}\r\n                        </th>\r\n                        <th onClick={()=>{fieldSortData('email')}}>\r\n                            email {fieldData==='email'? <Arrow/> : null}\r\n                        </th>\r\n                        <th onClick={()=>{fieldSortData('phone')}}>\r\n                            phone {fieldData==='phone'? <Arrow/> : null}\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {contactData.map((item) => (\r\n                        <tr key={item.id + item.email} \r\n                        onClick={()=>detailRow(item)}>\r\n                            <td> {item.id}</td>\r\n                            <td> {item.firstName}</td>\r\n                            <td> {item.lastName}</td>\r\n                            <td> {item.email}</td>\r\n                            <td> {item.phone}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            {rowIsClick? <DetailedItem detailItemData={detailItemData}/> : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;","import React, {useState} from 'react';\r\nimport \"./../index.css\";\r\n\r\nconst InputForm = ({getInputFormData}) => {\r\n\r\n    const [isFormOpen, setIsFormOpen] = useState(false)\r\n    const [id, setid] = useState('')\r\n    const [firstName, setfirstName] = useState('')\r\n    const [lastName, setlastName] = useState('')\r\n    const [email, setemail] = useState('')\r\n    const [phone, setphone] = useState('')\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        getInputFormData({id, firstName, lastName, email, phone})\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n\r\n        { !isFormOpen?\r\n            <button \r\n                className=\"btn btn-outline-secondary mt-5 mb-5\" \r\n                type=\"button\"\r\n                onClick={()=>{setIsFormOpen(true)}}\r\n            >\r\n                    Add Contact\r\n            </button>\r\n        :\r\n            <form className=\"needs-validation\" noValidate onSubmit={submitHandler}>\r\n                <div className=\"form-row\">\r\n                    <div className=\"col-md-1 mb-3\">\r\n                        \r\n                        <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        placeholder=\"id\"\r\n                        value={id}\r\n                        onChange={(event)=>{setid(event.target.value)}}\r\n                        />\r\n                   \r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        \r\n                        <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        placeholder=\"First name\" \r\n                        value={firstName}\r\n                        onChange={(event)=>{setfirstName(event.target.value)}}\r\n                        />\r\n                       \r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        \r\n                        <div className=\"input-group\">\r\n                            <input \r\n                            type=\"text\" \r\n                            className=\"form-control\"  \r\n                            placeholder=\"Last name\" \r\n                            aria-describedby=\"validationTooltipUsernamePrepend\" \r\n                            value={lastName}\r\n                            onChange={(event)=>{setlastName(event.target.value)}}\r\n                            />\r\n                            <div className=\"invalid-tooltip\">\r\n                                Please choose a unique and valid Last name.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3\">\r\n                        \r\n                        <input \r\n                        type=\"email\" \r\n                        className=\"form-control\" \r\n                        placeholder=\"email\"\r\n                        value={email}\r\n                        onChange={(event)=>{setemail(event.target.value)}}\r\n                        />\r\n                        <div className=\"invalid-tooltip\">\r\n                            Please provide a valid email.\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3\">\r\n                        \r\n                        <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        placeholder=\"phone\" \r\n                        value={phone}\r\n                        onChange={(event)=>{setphone(event.target.value)}}\r\n                        />\r\n                        \r\n                    </div>\r\n                </div>\r\n                <button className=\"btn btn-primary\" type=\"submit\">Submit form</button>\r\n            </form>\r\n        }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputForm;","import React, {Fragment} from 'react';\r\nimport Loader from \"./../loader/loader\";\r\nimport Table from \"./../table/table\";\r\nimport InputForm from \"./../inputForm/inputForm\";\r\n\r\nconst TableBody = ({contactData, sortData, detailItemData, directionSort, detailRow, isLoading, rowIsClick, onSearchSend, getInputFormData}) => {\r\n    return (\r\n        \r\n        isLoading ? <Loader/> : \r\n        <Fragment>\r\n            <InputForm getInputFormData={getInputFormData}/>\r\n            <Table contactData={contactData} \r\n            sortData={sortData} \r\n            directionSort={directionSort}\r\n            detailRow={detailRow}\r\n            detailItemData={detailItemData}\r\n            rowIsClick={rowIsClick}\r\n            onSearchSend={onSearchSend}/> \r\n            \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default TableBody","import React from 'react';\r\n\r\nconst Paginator = ({ pages, \r\n    currentPage, \r\n    onNextClick, \r\n    onPreviousClick, \r\n    buttonNextDisabled, \r\n    buttonPreviousDisabled,\r\n    currentPageActiv,\r\n    currentPageNumber\r\n}) => {\r\n    return (\r\n        <nav aria-label=\"...\">\r\n            <ul className=\"pagination\">\r\n                <li className={`page-item ${buttonPreviousDisabled}`}>\r\n                    <a className=\"page-link\" tabIndex=\"-1\" onClick={()=>onPreviousClick()}>\r\n                        Previous\r\n                    </a>\r\n                </li>\r\n                {pages.map((p) => {\r\n                    return (\r\n                        <li className={(currentPageNumber===p)?`page-item ${currentPageActiv}` : `page-item`} key={p}>\r\n                            <a \r\n                                className=\"page-link\" \r\n                                onClick={() => {\r\n                                    currentPage(p);\r\n                                }}\r\n                            >\r\n                                {p}\r\n                            </a>\r\n                        </li>\r\n                    );\r\n                })}\r\n\r\n                <li className={`page-item ${buttonNextDisabled}`}>\r\n                    <a className=\"page-link\" onClick={()=>{onNextClick()}}>\r\n                        Next\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Paginator;","import React, { useState, useEffect } from 'react';\nimport useServerData from './hooks/useServerData';\nimport Switcher from './switcher/switcher';\nimport TableBody from './tableBody/tableBody';\nimport Paginator from './paginator/paginator';\n\nfunction App() {\n  \n  const [isButtonClick, setIsButtonClick] = useState(false);\n  const [directionSort, setDirectionSort] = useState(true);\n  const [rowItem, setrowItem] = useState('');\n  const [url, setUrl] = useState('');\n  const [totalCountRow, setTotalCountRow] = useState(0);\n  const [totalCountPage, setTotalCountPage] = useState(0);\n  const [rowIsClick, setRowIsClick] = useState(false);\n  const limitCountPage = 50\n  const [currentPageNumber, setCurrentPageNumber] = useState(1);\n  const [buttonNextDisabled, setButtonNextDisabled] = useState('page-item');\n  const [buttonPreviousDisabled, setButtonPreviousDisabled] = useState('page-item');\n  const [currentPageActiv, setCurrentPageActiv] = useState('page-item');\n  const [searchText, setSearchText] = useState('');\n  const [newRow, setNewRow] = useState({});\n  const [{contactData, isLoading, setContactData, isLoaded }] = useServerData ({url, isButtonClick});\n\n  const buttonHandler = (url) => {\n    setUrl(url)\n    setIsButtonClick(true)\n  }\n\n  const getFiltredData = () =>{\n    if(!searchText) {\n      return contactData\n    }\n    return contactData.filter(\n      el=>{\n        return (el['firstName'].toLowerCase().includes(searchText.toLowerCase())\n        || el['lastName'].toLowerCase().includes(searchText.toLowerCase())\n        || el['email'].toLowerCase().includes(searchText.toLowerCase()))\n        \n      }\n    )\n  }\n\n  const filtredData = getFiltredData()\n  const lastBlockRow = currentPageNumber*limitCountPage\n  const firstBlockRow = lastBlockRow - limitCountPage + 1\n  const currentBlockRows = filtredData.slice(firstBlockRow, lastBlockRow)\n\n  const getInputFormData = ({id, firstName, lastName, email, phone}) =>{\n    setNewRow({id, firstName, lastName, email, phone})\n  }\n  \n  currentBlockRows.unshift(newRow)\n  \n  const currentPage = (pg) => {\n    setCurrentPageNumber(pg)\n    setButtonPreviousDisabled('')\n    setButtonNextDisabled('')\n    setCurrentPageActiv('active')\n  }\n\n  useEffect(()=>{\n    if(!isLoaded){\n      return\n    }\n    \n    setTotalCountRow(filtredData.length)\n    const getTotalCountPage = Math.ceil(totalCountRow/limitCountPage)\n    setTotalCountPage(getTotalCountPage)\n\n  }, [isLoaded, setTotalCountRow, filtredData.length, totalCountRow])\n\n  let pages = []\n  for (let i=1; i<=totalCountPage; i++) {\n    pages.push(i)\n  }\n\n  const onSearchSend = (text)=>{\n    setSearchText(text)\n  }\n \n  const sortData = (field) => {\n    \n    const copyData = contactData.concat();\n \n    let sortData;\n\n    if (directionSort) {\n      sortData = copyData.sort(\n        (a, b)=>{return a[field] > b[field] ? 1 : -1}\n      )\n    }  sortData = copyData.reverse(\n        (a, b)=>{return a[field] > b[field] ? 1 : -1}\n      )\n\n    setContactData(sortData)\n    setDirectionSort(!directionSort)\n  }\n\n  const detailRow = (row) => {\n    setRowIsClick(true)\n    setrowItem(row)\n  }\n\n  const onNextClick = () => {\n    if(currentPageNumber>totalCountPage-1){\n      setButtonNextDisabled('disabled')\n      return\n    }\n    setCurrentPageNumber(currentPageNumber + 1)\n  }\n\nconst onPreviousClick = () => {\n  if(currentPageNumber<2){\n    setButtonPreviousDisabled('disabled')\n    return\n  }\n  setCurrentPageNumber(currentPageNumber - 1)\n}\n\n  return (\n    <div className=\"container\">\n      {\n        !isButtonClick? <Switcher buttonHandler={buttonHandler}/>\n        :\n        <TableBody \n        getInputFormData={getInputFormData}\n        contactData={currentBlockRows} \n        sortData={sortData} \n        rowItem={rowItem}\n        directionSort={directionSort}\n        detailItemData={rowItem}\n        detailRow={detailRow}\n        isLoading={isLoading}\n        rowIsClick={rowIsClick}\n        onSearchSend={onSearchSend}/>\n      }\n      {isLoaded&&(totalCountRow>limitCountPage)&&\n        <Paginator \n          pages={pages} \n          currentPage={currentPage}\n          onNextClick={onNextClick}\n          onPreviousClick={onPreviousClick}\n          buttonNextDisabled={buttonNextDisabled}\n          buttonPreviousDisabled={buttonPreviousDisabled}\n          currentPageActiv={currentPageActiv}\n          currentPageNumber={currentPageNumber} />\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}